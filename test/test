#!/usr/bin/env bash
source $(dirname $0)/../lib/functions.inc

LOPEN_PAGER="less"

LOPEN_BROWSER="my_browser"
LOPEN_SCHEMES=(http https ftp)

function oneTimeSetUp() {
  LOPEN_MAILCAP_FILE=$(dirname $0)/testfiles/mailcap
  LOPEN_FILETYPES=$(dirname $0)/testfiles/filetypes
  TXTSYMLINK=$(dirname $0)/testfiles/symlink.txt
  TXTFILE=$(dirname $0)/testfiles/test.txt
  MDFILE=$(dirname $0)/testfiles/test.md
  MKDFILE=$(dirname $0)/testfiles/test.mkd
  MARKDOWNFILE=$(dirname $0)/testfiles/test.markdown
  NFOFILE=$(dirname $0)/testfiles/test.nfo
}

testInputType() {
  assertEquals "existent file"      "file"              "$(input_type ${TXTFILE})"
  assertEquals "nonexistent file"   ""                  "$(input_type xxx)"
  assertEquals "http://"            "http"              "$(input_type "http://www.google.com")"
  assertEquals "ftp://"             "ftp"               "$(input_type "ftp://www.google.com")"
  assertEquals "https://"           "https"             "$(input_type "https://www.google.com")"
  assertEquals "blah:// stderr"     "unknown protocol"  "$(input_type "blah://www.google.com" 2>&1)"
  assertEquals "blah:// stdout"     ""                  "$(input_type "blah://www.google.com" 2>/dev/null)"

  assertTrue   "existent file returns true"             "input_type ${TXTFILE}"
  assertFalse  "nonexistent file returns false"         "input_type xxx"
  assertTrue   "https:// status"                        "input_type 'https://www.google.com'"
  assertTrue   "http:// status"                         "input_type 'http://www.google.com'"
  assertTrue   "ftp:// status"                          "input_type 'ftp://www.google.com'"
  assertFalse  "blah:// status"                         "input_type 'blah://www.google.com' >&/dev/null"
}

testMimetype() {
  assertEquals "$(basename ${TXTFILE})"       "text/plain"    "$(mimetype "${TXTFILE}")"
  assertEquals "$(basename ${MDFILE})"        "text/markdown" "$(mimetype "${MDFILE}")"
  assertEquals "$(basename ${MKDFILE})"       "text/markdown" "$(mimetype "${MKDFILE}")"
  assertEquals "$(basename ${MARKDOWNFILE})"  "text/markdown" "$(mimetype "${MARKDOWNFILE}")"
  assertEquals "$(basename ${NFOFILE})"       "text/plain"    "$(mimetype "${NFOFILE}")"
  assertEquals "$(basename ${TXTSYMLINK})"    "text/plain"    "$(mimetype "${TXTSYMLINK}")"
}

testMailcapCmd() {
  assertEquals "text/markdown"  "markdown_cmd %s"   "$(mailcap_cmd 'text/markdown')"
  assertEquals "text/plain"     "plaintext_cmd %s"  "$(mailcap_cmd 'text/plain')"
}

testMailcapFlags() {
  assertEquals "text/markdown"  "copiousoutput"   "$(mailcap_flags 'text/markdown')"
  assertEquals "text/plain"     ""                "$(mailcap_flags 'text/plain')"
}

testCmd() {
  assertEquals "${MDFILE}"              "markdown_cmd ${MDFILE}"            "$(cmd ${MDFILE})"
  assertEquals "${TXTFILE}"             "plaintext_cmd ${TXTFILE}"          "$(cmd ${TXTFILE})"
  assertEquals "http://www.google.com"  "${BROWSER} http://www.google.com"  "$(cmd "http://www.google.com")"
  assertEquals "blah://nothing"         ""                                  "$(cmd "blah://nothing")"
}

testForcedMimetype() {
  assertEquals ".md"              "text/markdown"           "$(forced_mimetype test.md)"
  assertEquals ".mkd"             "text/markdown"           "$(forced_mimetype test.mkd)"
  assertEquals ".markdown"        "text/markdown"           "$(forced_mimetype test.markdown)"
  assertEquals ".nfo"             "text/plain"              "$(forced_mimetype test.nfo)"
  assertEquals ".m"               ""                        "$(forced_mimetype test.m)"
  assertEquals ".g"               ""                        "$(forced_mimetype test.g)"
}

# load and run shUnit2
source $(dirname $0)/../vendor/shunit.inc

# vim: ai ts=2 sw=2 et sts=2 ft=sh
